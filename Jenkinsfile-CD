pipeline {
    agent { label 'agent-main' }

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }

    environment {
        REPO_URL = 'https://github.com/22127063/spring-petclinic-microservices.git'
        NAMESPACE_DEV = 'dev'
        NAMESPACE_STAGING = 'staging'
        DOCKER_REGISTRY = 'docker.io/yourusername'
    }

    parameters {
        string(name: 'CUSTOMERS_BRANCH', defaultValue: 'main', description: 'Branch for customers-service')
        string(name: 'VISITS_BRANCH', defaultValue: 'main', description: 'Branch for visits-service')
        string(name: 'VETS_BRANCH', defaultValue: 'main', description: 'Branch for vets-service')
        string(name: 'GENAI_BRANCH', defaultValue: 'main', description: 'Branch for genai-service')
        string(name: 'ADMIN_BRANCH', defaultValue: 'main', description: 'Branch for admin-server')
        string(name: 'CONFIG_BRANCH', defaultValue: 'main', description: 'Branch for config-server')
        string(name: 'DISCOVERY_BRANCH', defaultValue: 'main', description: 'Branch for discovery-server')
        string(name: 'GATEWAY_BRANCH', defaultValue: 'main', description: 'Branch for api-gateway')

        choice(name: 'IMAGE_TAG_MODE', choices: ['latest', 'commit-hash'], description: 'Choose image tag for deployment')
        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to trigger staging deployment')
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    sh '''
                    if [ ! -d spring-petclinic-microservices ]; then
                        git clone https://github.com/22127063/spring-petclinic-microservices.git
                    fi
                    cd spring-petclinic-microservices
                    git reset --hard HEAD
                    git pull origin main
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Check if we are deploying to staging based on a tag
                    def isStaging = params.GIT_TAG != ''

                    // Build the tags for the services
                    def tags = [
                        'customers-service'    : params.IMAGE_TAG_MODE == 'commit-hash' ? getCommitHash('customers', params.CUSTOMERS_BRANCH) : 'latest',
                        'visits-service'       : params.IMAGE_TAG_MODE == 'commit-hash' ? getCommitHash('visits', params.VISITS_BRANCH) : 'latest',
                        'vets-service'         : params.IMAGE_TAG_MODE == 'commit-hash' ? getCommitHash('vets', params.VETS_BRANCH) : 'latest',
                        'genai-service'        : params.IMAGE_TAG_MODE == 'commit-hash' ? getCommitHash('genai', params.GENAI_BRANCH) : 'latest',
                        'admin-server'         : params.IMAGE_TAG_MODE == 'commit-hash' ? getCommitHash('admin', params.ADMIN_BRANCH) : 'latest',
                        'config-server'        : params.IMAGE_TAG_MODE == 'commit-hash' ? getCommitHash('config', params.CONFIG_BRANCH) : 'latest',
                        'discovery-server'     : params.IMAGE_TAG_MODE == 'commit-hash' ? getCommitHash('discovery', params.DISCOVERY_BRANCH) : 'latest',
                        'api-gateway'          : params.IMAGE_TAG_MODE == 'commit-hash' ? getCommitHash('gateway', params.GATEWAY_BRANCH) : 'latest'
                    ]

                    // Deploy to dev if no tag is provided, or deploy to staging if tag is provided
                    def namespace = isStaging ? NAMESPACE_STAGING : NAMESPACE_DEV
                    def imageTag = isStaging ? params.GIT_TAG : 'latest'

                    // Ensure the namespace exists
                    sh "kubectl get namespace ${namespace} || kubectl create namespace ${namespace}"

                    // Deploy all services using Helm chart
                    sh """
                    helm upgrade --install petclinic ./spring-petclinic-microservices/petclinic-chart -n ${namespace} --create-namespace \\
                        --set namespace=${namespace} \\
                        --set services.customers-service.tag=${tags['customers-service']} \\
                        --set services.visits-service.tag=${tags['visits-service']} \\
                        --set services.vets-service.tag=${tags['vets-service']} \\
                        --set services.genai-service.tag=${tags['genai-service']} \\
                        --set services.admin-server.tag=${tags['admin-server']} \\
                        --set services.discovery-server.tag=${tags['discovery-server']} \\
                        --set services.config-server.tag=${tags['config-server']} \\
                        --set services.api-gateway.tag=${tags['api-gateway']}
                    """

                    // If deploying to staging, push the Docker images to Docker Hub
                    if (isStaging) {
                        sh "docker build -t ${DOCKER_REGISTRY}/petclinic/customers-service:${params.GIT_TAG} ./spring-petclinic-microservices/customers-service"
                        sh "docker push ${DOCKER_REGISTRY}/petclinic/customers-service:${params.GIT_TAG}"

                        // Repeat for other services...
                    }

                    // Trigger ArgoCD for staging deployment
                    if (isStaging) {
                        sh """
                        argocd app sync petclinic --namespace ${namespace} --revision ${params.GIT_TAG} --sync-option Prune=true
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}

def getCommitHash(serviceName, branchName) {
    dir("spring-petclinic-microservices") {
        sh "git checkout ${branchName}"
        def hash = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
        return hash
    }
}
