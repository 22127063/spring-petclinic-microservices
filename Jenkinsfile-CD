pipeline {
    agent { label 'agent-main' }

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }
    environment {
        REPO_URL = 'https://github.com/22127063/spring-petclinic-microservices.git'
        DEPLOY_PATH = 'k8s/deployment'
        SERVICES_WITHOUT_TESTS = "spring-petclinic-admin-server spring-petclinic-genai-service"
        NAMESPACE = 'petclinic'
    }

    parameters {
        string(name: 'CUSTOMERS_BRANCH', defaultValue: 'main', description: 'Branch for customers-service')
        string(name: 'VISITS_BRANCH', defaultValue: 'main', description: 'Branch for visits-service')
        string(name: 'VETS_BRANCH', defaultValue: 'main', description: 'Branch for vets-service')
        string(name: 'GENAI_BRANCH', defaultValue: 'main', description: 'Branch for genai-service')
        choice(name: 'TARGET_SERVICE', choices: ['customers', 'visits', 'vets', 'genai'], description: 'Service to deploy from feature branch')
        choice(name: 'IMAGE_TAG_MODE', choices: ['latest', 'commit-hash'], description: 'Ch·ªçn image tag ƒë·ªÉ deploy')
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    sh '''
                    if [ ! -d spring-petclinic-microservices ]; then
                        git clone https://github.com/22127063/spring-petclinic-microservices.git
                    fi
                    cd spring-petclinic-microservices
                    git reset --hard HEAD
                    git pull origin main
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    def branches = [
                        'customers': params.CUSTOMERS_BRANCH,
                        'visits'   : params.VISITS_BRANCH,
                        'vets'     : params.VETS_BRANCH,
                        'genai'    : params.GENAI_BRANCH
                    ]

                    def services = [
                        'config-server',
                        'discovery-server',
                        'admin-server',
                        'customers-service',
                        'visits-service',
                        'vets-service',
                        'genai-service',
                        'api-gateway'
                    ]

                    // L·∫•y commit hash n·∫øu c·∫ßn
                    def commitHash = ""
                    if (params.IMAGE_TAG_MODE == 'commit-hash') {
                        commitHash = sh(script: "cd spring-petclinic-microservices && git rev-parse --short HEAD", returnStdout: true).trim()
                    }

                    for (svc in services) {
                        def branch = (svc.contains(params.TARGET_SERVICE)) ? branches[params.TARGET_SERVICE] : "main"
                        def repoPath = "spring-petclinic-microservices/spring-petclinic-${svc}"

                        sh "cd ${repoPath} && git fetch origin ${branch} && git checkout ${branch}"

                        def tag = (params.IMAGE_TAG_MODE == 'commit-hash') ? commitHash : "latest"
                        def imageTag = "22127063/spring-petclinic-${svc}:${tag}"
                        def yamlPath = "spring-petclinic-microservices/${DEPLOY_PATH}/${svc}.yaml"

                        echo "üöÄ Deploying ${svc}-service with image: ${imageTag}"

                        // Ensure namespace exists
                        sh "kubectl get namespace ${NAMESPACE} || kubectl create namespace ${NAMESPACE}"

                        // Apply Ingress if needed
                        sh "kubectl apply -f spring-petclinic-microservices/k8s/ingress/ingress.yaml -n ${NAMESPACE}"

                        // Apply ConfigMap if defined for the service
                        sh "kubectl apply -f spring-petclinic-microservices/k8s/configmap.yaml -n ${NAMESPACE}"

                        sh "kubectl apply -f spring-petclinic-microservices/k8s/secret.yaml -n ${NAMESPACE}"

                        sh "helm upgrade pdb bitnami/mysql -n spring-petclinic -f k8s/mysql/values.yml --version 6.14.4 --install"

                        // Only replace image line if not using 'latest'
                        if (params.IMAGE_TAG_MODE == 'commit-hash') {
                            sh "sed -i 's|image: .*|image: ${imageTag}|' ${yamlPath}"
                        }

                        // Apply deployment YAML
                        sh "kubectl apply -f ${yamlPath}"
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
