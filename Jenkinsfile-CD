pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }
    environment {
        REPO_URL = 'https://github.com/22127063/spring-petclinic-microservices.git'
        IMAGE_NAME = '22127063/devops_prj2'
        DEPLOY_PATH = 'k8s/deployment'
    }

    parameters {
        string(name: 'CUSTOMERS_BRANCH', defaultValue: 'main', description: 'Branch for customers-service')
        string(name: 'VISITS_BRANCH', defaultValue: 'main', description: 'Branch for visits-service')
        string(name: 'VETS_BRANCH', defaultValue: 'main', description: 'Branch for vets-service')
        string(name: 'GENAI_BRANCH', defaultValue: 'main', description: 'Branch for genai-service')
        choice(name: 'TARGET_SERVICE', choices: ['customers', 'visits', 'vets', 'genai'], description: 'Service to deploy from feature branch')
    }

    stages {
        stage('Checkout Deployment Code') {
            steps {
                script {
                    if (!fileExists('spring-petclinic-microservices')) {
                        sh "git clone ${REPO_URL}"
                    }

                    dir('spring-petclinic-microservices') {
                        sh 'git reset --hard HEAD && git checkout main && git pull origin main'
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    def branches = [
                        'customers': params.CUSTOMERS_BRANCH,
                        'visits'   : params.VISITS_BRANCH,
                        'vets'     : params.VETS_BRANCH,
                        'genai'    : params.GENAI_BRANCH
                    ]

                    def services = ['customers', 'visits', 'vets', 'genai']

                    for (svc in services) {
                        def branch = (svc == params.TARGET_SERVICE) ? branches[svc] : "main"
                        def repoPath = "spring-petclinic-microservices/spring-petclinic-${svc}-service"

                        sh "cd ${repoPath} && git fetch origin ${branch}"

                        def commitId = sh(
                            script: "cd ${repoPath} && git rev-parse --short origin/${branch}",
                            returnStdout: true
                        ).trim()

                        def tag = (branch != 'main') ? "-${branch}" : ""
                        def imageTag = "${IMAGE_NAME}/${svc}:${commitId}${tag}"

                        echo "ðŸš€ Deploying ${svc}-service with image: ${imageTag}"

                        def yamlPath = "spring-petclinic-microservices/${DEPLOY_PATH}/${svc}.yaml"

                        // Replace image inline using sed
                        sh """
                            sed -i 's|image: .*|image: ${imageTag}|' ${yamlPath}
                            kubectl apply -f ${yamlPath}
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
