pipeline {
    agent { label 'agent-main' } 
    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }
    environment {
        WORKSPACE = "${env.WORKSPACE}"
        SERVICES_WITHOUT_TESTS = "spring-petclinic-admin-server spring-petclinic-genai-service"
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    sh '''
                    if [ ! -d spring-petclinic-microservices ]; then
                        git clone https://github.com/22127063/spring-petclinic-microservices.git
                    fi
                    cd spring-petclinic-microservices
                    git reset --hard HEAD
                    git pull origin main
                    '''
                }
            }
        }

        stage('Detect Changes') {
            steps {
                script {
                    echo "Running pipeline for Branch: ${env.BRANCH_NAME}"

                    def prevCommitExists = sh(script: "cd spring-petclinic-microservices && git rev-parse HEAD~1", returnStatus: true) == 0
                    def changedFiles = prevCommitExists 
                        ? sh(script: "cd spring-petclinic-microservices && git diff --name-only HEAD~1 HEAD", returnStdout: true).trim().split("\n")
                        : []

                    def services = [
                        'spring-petclinic-admin-server',
                        'spring-petclinic-api-gateway',
                        'spring-petclinic-config-server',
                        'spring-petclinic-customers-service',
                        'spring-petclinic-discovery-server',
                        'spring-petclinic-genai-service',
                        'spring-petclinic-vets-service',
                        'spring-petclinic-visits-service'
                    ]

                    def changedServiceList = services.findAll { service ->
                        changedFiles.any { it.contains(service) }
                    }

                    def commonFiles = ["pom.xml", ".github", "docker-compose.yml", "Dockerfile"]

                    if (changedFiles.any { file -> commonFiles.any { file.contains(it) } }) {
                        changedServiceList = services
                    }

                    env.CHANGED_SERVICES = changedServiceList.join(" ")

                    if (env.CHANGED_SERVICES.trim().isEmpty()) {
                        echo "No relevant changes detected. Skipping pipeline."
                        currentBuild.result = 'SUCCESS'
                        return
                    }

                    echo "Services to build: ${env.CHANGED_SERVICES}"
                }
            }
        }

        stage('Test Services') {
            when {
                expression { return !env.CHANGED_SERVICES.trim().isEmpty() }
            }
            steps {
                script {
                    def services = env.CHANGED_SERVICES.trim().split(" ")
                    for (service in services) {
                        echo "Testing service: ${service}"
                        dir("spring-petclinic-microservices/${service}") {
                            if (!env.SERVICES_WITHOUT_TESTS.contains(service)) {
                                try {
                                    sh 'mvn clean test jacoco:report'
                                } catch (Exception e) {
                                    echo "Tests failed for ${service}, continuing as UNSTABLE"
                                    currentBuild.result = 'UNSTABLE'
                                }

                                junit allowEmptyResults: true, testResults: '**/target/surefire-reports/*.xml'
                                recordCoverage(
                                    tools: [[parser: 'JACOCO', id: "${service}", name: "${service}"]],
                                    sourceDirectories: [[path: 'spring-petclinic-microservices/vets-service/src/main/java']]
                                )

                                publishHTML(target: [
                                    reportDir: 'target/site/jacoco',
                                    reportFiles: 'index.html',
                                    reportName: "JaCoCo Report - ${service}",
                                    keepAll: true,
                                    alwaysLinkToLastBuild: true,
                                    allowMissing: true
                                ])
                            } else {
                                echo "⏭ Skipping tests for ${service} (No test folders)"
                            }
                        }
                    }
                }
            }
        }

        stage('Check Test Coverage') {
            when {
                expression { !env.CHANGED_SERVICES.trim().isEmpty() }
            }
            steps {
                script {
                    def allowedServices = ['customer', 'vets', 'visits']
                    def services = env.CHANGED_SERVICES.trim().split(" ").findAll { allowedServices.contains(it) }

                    for (service in services) {
                        if (env.SERVICES_WITHOUT_TESTS.contains(service)) {
                            echo "Skipping coverage check for ${service} (no tests)"
                            continue
                        }

                        def xmlPath = "${service}/target/site/jacoco/jacoco.xml"
                        if (!fileExists(xmlPath)) {
                            error("Coverage report missing for ${service}")
                            continue
                        }

                        def xml = readFile(xmlPath)
                        def missed = 0.0, covered = 0.0
                        (xml =~ /<counter type="INSTRUCTION" missed="([^"]*)" covered="([^"]*)"/).each {
                            missed += it[1].toFloat()
                            covered += it[2].toFloat()
                        }

                        def coverage = covered / (missed + covered)
                        def percent = Math.round(coverage * 100) / 100.0
                        echo "${service} test coverage: ${percent}%"

                        if (coverage < 0.7) {
                            error("Coverage below 70% for ${service}")
                        }
                    }
                }
            }
        }

        stage('Build Services') {
            when {
                expression { return !env.CHANGED_SERVICES.trim().isEmpty() }
            }
            steps {
                script {
                    def serviceList = env.CHANGED_SERVICES.trim().split(" ")
                    for (service in serviceList) {
                        echo "Building service: ${service}"
                        dir("spring-petclinic-microservices/${service}") {
                            if (fileExists('pom.xml')) {
                                echo "pom.xml found in ${service}, proceeding with build."
                                sh 'mvn clean package -DskipTests -Dspring.cloud.config.enabled=false'
                                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true

                                // Kiểm tra xem data.sql có trong JAR không
                                echo "Checking if data.sql is packaged inside the JAR..."
                                sh '''
                                cd target
                                jar tf *.jar | grep data.sql || echo "data.sql not found in JAR"
                                '''
                            } else {
                                echo "pom.xml NOT FOUND in ${service}. Skipping build."
                            }
                        }
                    }
                }
            }
        }

        stage('Docker Build & Push') {
            when {
                expression { return !env.CHANGED_SERVICES?.trim().isEmpty() }
            }
            steps {
                script {
                    def servicesList = env.CHANGED_SERVICES.tokenize(' ')
                    if (servicesList.isEmpty()) {
                        error("No changed services found. Check Detect Changes stage.")
                    }

                    def servicePorts = [
                        "spring-petclinic-admin-server": 9090,
                        "spring-petclinic-api-gateway": 8080,
                        "spring-petclinic-config-server": 8888,
                        "spring-petclinic-customers-service": 8081,
                        "spring-petclinic-discovery-server": 8761,
                        "spring-petclinic-genai-service": 8084,
                        "spring-petclinic-vets-service": 8083,
                        "spring-petclinic-visits-service": 8082
                    ]

                    def commitHash = sh(script: "cd spring-petclinic-microservices && git rev-parse --short HEAD", returnStdout: true).trim()

                    withCredentials([usernamePassword(
                        credentialsId: 'docker',
                        usernameVariable: 'DOCKERHUB_USER',
                        passwordVariable: 'DOCKERHUB_PASSWORD'
                    )]) {
                        sh """
                            echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USER}" --password-stdin
                        """
                    }

                    for (service in servicesList) {
                        echo "Building & pushing Docker image for ${service}..."
                        def shortServiceName = service.replaceFirst("spring-petclinic-", "")
                        def servicePort = servicePorts.get(service, 8080)

                        dir("spring-petclinic-microservices") {
                            if (fileExists("Dockerfile")) {
                                def imageTag = "22127063/${service}:${commitHash}"
                                sh """
                                docker build \\
                                    --build-arg SERVICE_NAME=${shortServiceName} \\
                                    --build-arg EXPOSED_PORT=${servicePort} \\
                                    -f Dockerfile \\
                                    -t ${imageTag} \\
                                    -t 22127063/${service}:latest \\
                                    .
                                docker push ${imageTag}
                                docker push 22127063/${service}:latest
                                docker rmi ${imageTag} || true
                                docker rmi 22127063/${service}:latest || true
                                docker image prune -f
                                """
                            } else {
                                echo "Dockerfile not found at root of spring-petclinic-microservices, skipping build."
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}