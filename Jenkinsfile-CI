pipeline {
    agent any  
    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }

    environment {
        SERVICES_WITHOUT_TESTS = "spring-petclinic-admin-server spring-petclinic-genai-service"
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    sh '''
                    if [ ! -d spring-petclinic-microservices ]; then
                        git clone https://github.com/22127063/spring-petclinic-microservices.git
                    fi
                    cd spring-petclinic-microservices
                    git reset --hard HEAD
                    git pull origin main
                    '''
                }
            }
        }

        stage('Detect Changes') {
            steps {
                script {
                    echo "üîç Detecting changes..."

                    def prevCommitExists = sh(script: "cd spring-petclinic-microservices && git rev-parse HEAD~1", returnStatus: true) == 0
                    def changedFiles = prevCommitExists 
                        ? sh(script: "cd spring-petclinic-microservices && git diff --name-only HEAD~1 HEAD", returnStdout: true).trim().split("\n")
                        : []

                    def services = [
                        'spring-petclinic-admin-server',
                        'spring-petclinic-api-gateway',
                        'spring-petclinic-config-server',
                        'spring-petclinic-customers-service',
                        'spring-petclinic-discovery-server',
                        'spring-petclinic-genai-service',
                        'spring-petclinic-vets-service',
                        'spring-petclinic-visits-service'
                    ]

                    def changedServiceList = services.findAll { service ->
                        changedFiles.any { it.contains(service) }
                    }

                    def commonFiles = ["pom.xml", ".github", "docker-compose.yml", "Jenkinsfile"]
                    if (changedFiles.any { file -> commonFiles.any { file.contains(it) } }) {
                        changedServiceList = services
                    }

                    env.CHANGED_SERVICES = changedServiceList.join(" ")

                    if (env.CHANGED_SERVICES.trim().isEmpty()) {
                        echo "‚úÖ No relevant changes detected. Skipping pipeline."
                        currentBuild.result = 'SUCCESS'
                        return
                    }

                    echo "üì¶ Services to build: ${env.CHANGED_SERVICES}"
                }
            }
        }

        stage('Test Services') {
            when {
                expression { return !env.CHANGED_SERVICES.trim().isEmpty() }
            }
            steps {
                script {
                    def serviceList = env.CHANGED_SERVICES.trim().split(" ")
                    for (service in serviceList) {
                        echo "üî¨ Testing service: ${service}"
                        dir("spring-petclinic-microservices/${service}") {
                            if (fileExists('pom.xml')) {
                                if (!env.SERVICES_WITHOUT_TESTS.split(" ").contains(service)) {
                                    try {
                                        sh 'mvn clean test jacoco:report -Dspring.cloud.config.enabled=false'
                                    } catch (Exception e) {
                                        echo "‚ö†Ô∏è Tests failed for ${service}, continuing pipeline..."
                                        currentBuild.result = 'UNSTABLE'
                                    }

                                    junit allowEmptyResults: true, testResults: '**/target/surefire-reports/*.xml'

                                    if (fileExists('target/site/jacoco/jacoco.xml')) {
                                        recordCoverage(
                                            tools: [[$class: 'JacocoCoverageAdapter', pattern: '**/target/site/jacoco/jacoco.xml']],
                                            id: 'jacoco',
                                            name: 'JaCoCo Coverage',
                                            sourceCodeRetention: 'EVERY_BUILD',
                                            qualityGates: [
                                                [threshold: 70.0, metric: 'LINE', baseline: 'PROJECT', criticality: 'UNSTABLE'],
                                                [threshold: 70.0, metric: 'BRANCH', baseline: 'PROJECT', criticality: 'UNSTABLE']
                                            ]
                                        )
                                    } else {
                                        echo "‚ö†Ô∏è JaCoCo XML not found for ${service}, skipping coverage report"
                                    }
                                } else {
                                    echo "‚è≠ Skipping tests for ${service} (in SERVICES_WITHOUT_TESTS)"
                                }
                            } else {
                                echo "‚ùå pom.xml not found in ${service}, skipping"
                            }
                        }
                    }
                }
            }
        }

        stage('Build Services') {
            when {
                expression { return !env.CHANGED_SERVICES.trim().isEmpty() }
            }
            steps {
                script {
                    def serviceList = env.CHANGED_SERVICES.trim().split(" ")
                    for (service in serviceList) {
                        echo "üèóÔ∏è Building service: ${service}"
                        dir("spring-petclinic-microservices/${service}") {
                            if (fileExists('pom.xml')) {
                                sh 'mvn package -DskipTests -Dspring.cloud.config.enabled=false'
                                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                            } else {
                                echo "‚ùå pom.xml not found in ${service}, skipping build"
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo "‚úÖ Pipeline completed successfully."
        }
        unstable {
            echo "‚ö†Ô∏è Pipeline completed with warnings."
        }
        failure {
            echo "‚ùå Pipeline failed."
        }
    }
}
